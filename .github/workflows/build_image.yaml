name: PR Open

# used on push for testing / development
on:
  push:
    branches: ['master', 'main', 'feat/5-deploy-frontend']

# on:
  pull_request:
    # debug: remove the dev,putting build action on non existent branches for debug
    branches: ['main']
    types: ['opened', 'reopened']
    paths-ignore:
      - .vscode/**
      - .gitignore
      - LICENSE
      - readme.md
      - code_of_conduct.md
      - cicd/**
      - scripts/**
      - .flake8
      - COMPLIANCE.yaml
  workflow_dispatch:


jobs:
  # This workflow contains a single job called "build"
  # working on testing this: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idoutputs
  CalculateImageTags:
    defaults:
      run:
        shell: bash
    name: calculateImageTag
    runs-on: ubuntu-22.04
    outputs:
      imagetag: ${{ steps.CalculateImageTagstep.outputs.IMAGE_TAG}}
    steps:
    - name: Calculate Image Tag
      id: CalculateImageTagstep
      shell: bash
      run: |
        DATESTAMP=$(date +%Y%m%d-%H%M)
        echo datestamp is $DATESTAMP
        echo event number: ${{ github.event.number }}
        TEMP_IMAGE_TAG=20230425-2337
        echo hard coding image tag as $TEMP_IMAGE_TAG
        #echo "IMAGE_TAG=${DATESTAMP}" >> "$GITHUB_OUTPUT"
        echo "IMAGE_TAG=${TEMP_IMAGE_TAG}" >> "$GITHUB_OUTPUT"
  testGetImageTag:
  # testing passing params between jobs
    defaults:
      run:
        shell: bash
    needs: CalculateImageTags
    runs-on: ubuntu-22.04
    steps:
    - name: GET Image Tag
      id: getImageTag
      shell: bash
      env:
        IMAGE_TAG: ${{ needs.CalculateImageTags.outputs.imagetag }}
      run: |
        echo image tag is: $IMAGE_TAG

  BuildContainerImage:
    defaults:
      run:
        shell: bash
    needs: CalculateImageTags
    name: 'Build Streamlit Container Image'
    runs-on: ubuntu-22.04
    env:
      DEBUG_DEPLOY: false

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v3
      id: checkout
      # with:
      #   fetch-depth: 0
    - name: Verify tag
      id: CalculateImageTagstep
      shell: bash
      env:
        IMAGE_TAG: ${{ needs.CalculateImageTags.outputs.imagetag }}
      run: |
        echo image tag is $IMAGE_TAG

    # - name: Log in to GitHub Docker Registry
    #   uses: docker/login-action@v1
    #   with:
    #     registry: ghcr.io
    #     username: ${{ github.repository_owner  }}
    #     password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Build and Push Client Docker Image
    #   uses: docker/build-push-action@v2
    #   env:
    #     IMAGE_TAG: ${{ needs.CalculateImageTags.outputs.imagetag }}

    #   with:
    #     push: true # Will only build if this is not here
    #     tags: |
    #       ghcr.io/${{ github.repository_owner }}/streamlit_frontend:latest
    #       ghcr.io/${{ github.repository_owner }}/streamlit_frontend:$IMAGE_TAG
  
  # This workflow contains a single job called "build"
  DeployJob:
    defaults:
      run:
        shell: bash
    needs: [CalculateImageTags, BuildContainerImage]
    name: 'Deploy Streamlit Image'
    runs-on: ubuntu-22.04
    environment: dev

    steps:
    - uses: actions/checkout@v3
      id: checkout
      with:
        fetch-depth: 0

    - name: Log in and set context
      uses: redhat-actions/oc-login@v1
      with:
        openshift_server_url: ${{ secrets.OC_SERVER }}
        openshift_token: ${{ secrets.OC_TOKEN }}
        namespace: ${{ secrets.OC_NAMESPACE }}

    - name: Calculate Zone
      id: calculateZone
      shell: bash
      run: |
        event_num=${{ github.event.number }}
        if [[ -z "${event_num// }" ]]; then
          zone=pr-testing
        else
          zone=pr-$event_num
        fi
        echo zone: $zone
        echo "ZONE=$zone" >> $GITHUB_ENV

    - name: Run Helm Chart
      id: runHelmChart
      shell: bash
      run: |
        cd cicd
        helm upgrade --install snowpack-frontend snowpack-frontend \
        --set ostore_secrets.bucket=${{ vars.OBJ_STORE_BUCKET }} \
        --set ostore_secrets.secret=${{ secrets.OBJ_STORE_SECRET }} \
        --set ostore_secrets.user=${{ secrets.OBJ_STORE_USER }} \
        --set ostore_secrets.host=${{ vars.OBJ_STORE_HOST }} \
        --set image.image_tag: ${{ env.IMAGE_TAG }} \
        --set image.promote: bcgov/streamlit_frontend:${{ env.IMAGE_TAG }} \
        --set ${{ env.ZONE }}

    # - name: 'Deploy'
    #   uses: 'deliverybot/helm@v1'
    #   env:
    #     IMAGE_TAG: ${{ needs.CalculateImageTags.outputs.imagetag }}
    #     KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
    #     ZONE: ${{ env.ZONE }}
    #   with:
    #     release: 'snowpack-frontend'
    #     namespace: ${{ vars.OC_NAMESPACE }}
    #     chart: 'cicd/snowpack-frontend'
    #     token: '${{ github.token }}'
        
    #     # todo: once working inject the zone / prnumber in
    #     values: |
    #       ostore_secrets.bucket: ${{ vars.OBJ_STORE_BUCKET }}
    #       ostore_secrets.secret: ${{ secrets.OBJ_STORE_SECRET }}
    #       ostore_secrets.user: ${{ secrets.OBJ_STORE_USER }}
    #       ostore_secrets.host: ${{ vars.OBJ_STORE_HOST }}
    #       image.image_tag: ${{ env.IMAGE_TAG }}
    #       image.promote: bcgov/streamlit_frontend:${{ env.IMAGE_TAG }}
    #       app.zone: ${{ env.ZONE }}
